# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import worker, schedulers, util, steps, reporters
from buildbot.www import auth
from twisted.internet import defer

import configparser
import pathlib


class ReactOSLDAPUserInfoProvider(auth.UserInfoProviderBase):
    def getUserInfo(self, username):
        # ReactOSLDAPAuth already checks for group membership, so every logged in user can be added to the 'logged_in_developer' group.
        return defer.succeed({
            'userName': username,
            'email': username,
            'groups': ['logged_in_developer'],
        })

class ReactOSLDAPAuth(auth.CustomAuth):
    def __init__(self):
        super().__init__()
        self.userInfoProvider = ReactOSLDAPUserInfoProvider()

        global credentials
        self.url = credentials.get("ldap", "url")
        self.basedn = credentials.get("ldap", "basedn")
        self.binddn = credentials.get("ldap", "binddn")
        self.passwd = credentials.get("ldap", "passwd")
        self.search = credentials.get("ldap", "search")

    def check_credentials(self, user, password):
        import ldap

        user = user.decode('utf-8')
        password = password.decode('utf-8')

        try:
            res = self._authenticate(user, password)
        except ldap.LDAPError as e:
            print('ReactOSLDAPAuth: LDAPError: ' + str(e))
            res = False

        return res

    def _authenticate(self, user, password):
        import ldap

        search_conn = ldap.initialize(self.url)
        search_conn.simple_bind_s(self.binddn, self.passwd)

        try:
            result = search_conn.search_s(self.basedn, ldap.SCOPE_SUBTREE, self.search % user, ['objectclass'], 1)
        except ldap.SERVER_DOWN:
            print('ReactOSLDAPAuth: LDAP server seems down')
            return False

        search_conn.unbind()

        # Make sure we found a single user in the LDAP DB
        if not result or len(result) != 1:
            print('ReactOSLDAPAuth: User "%s" not found in LDAP DB' % user)
            return False

        auth_conn = ldap.initialize(self.url)
        ldap_dn = result[0][0]

        # Authenticate the user
        try:
            auth_conn.simple_bind_s(ldap_dn, password)
        except ldap.INVALID_CREDENTIALS:
            print('ReactOSLDAPAuth: Invalid credentials for user "%s"' % user)
            return False

        auth_conn.unbind()
        return True


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}
c['buildbotNetUsageData'] = None

# Read the config
credentials = configparser.RawConfigParser()
if len(credentials.read("credentials.ini")) == 0:
    raise Exception("credentials.ini not found or empty!")

####### WORKERS

c['workers'] = [
    worker.LocalWorker('web-playground'),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### SCHEDULERS

c['schedulers'] = []

c['schedulers'].append(schedulers.AnyBranchScheduler(
    name='all',
    builderNames=["Build"],
))

c['schedulers'].append(schedulers.ForceScheduler(
    name="Force",
    reason=util.StringParameter(name="reason", required=True, label="Reason:", default="A reason for running this build"),
    codebases=[util.CodebaseParameter("", repository=None, project=None)],
    builderNames=["Build"],
))

####### BUILDERS

scripts_root = "/srv/buildbot/master_data/"

Build = util.BuildFactory()
Build.addStep(steps.GitHub(repourl='https://github.com/reactos/web-content.git', mode='full', haltOnFailure=True))
Build.addStep(steps.ShellCommand(name="build", command=[scripts_root + "build", util.Interpolate('%(src::branch)s')], haltOnFailure=True))
Build.addStep(steps.ShellCommand(name="deploy", command=[scripts_root + "deploy", util.Interpolate('%(src::branch)s')], haltOnFailure=True))

c['builders'] = [
    util.BuilderConfig(name="Build", workernames=["web-playground"], builddir="Build", factory=Build),
]

####### BUILDBOT SERVICES

c['services'] = [
    reporters.GitHubStatusPush(
        token=credentials.get("github", "personal_access_token")
    ),
]

####### PROJECT IDENTITY

c['title'] = "Website"
c['titleURL'] = "https://web-content.reactos.org/"
c['buildbotURL'] = "https://build.web-content.reactos.org/"

# web UI
c['www'] = {
    'port': 8010,
    'plugins': {
        'waterfall_view': True,
        'console_view': True,
        'grid_view': True,
    },
    'auth': ReactOSLDAPAuth(),
    'authz': util.Authz(
        allowRules=[
            util.AnyControlEndpointMatcher(role="logged_in_developer"),
        ],
        roleMatchers=[
            util.RolesFromGroups(),
        ]
    ),
    'change_hook_dialects': {
        'github': {
            'pullrequest_ref': 'head',
            'secret': credentials.get("github", "webhook_secret"),
        },
    },
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
